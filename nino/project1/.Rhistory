)
ctrl <- makeTuneControlRandom(maxit = 48)
rdesc <- makeResampleDesc("CV", iters = 4)
parallelStartMulticore(16)
res <- tuneParams(xgblearner, trainTask, rdesc, measures = rmse, par.set = hyperpara_range, control = ctrl)
train_eng$count_log <- log1p(train$count)
trainTask <- makeRegrTask(data = train_eng, target = "count_log")
xgblearner <- makeLearner("regr.xgboost", nrounds = 400, nthread = 1, base_score = mean(train_eng$count_log))
hyperpara_range <- makeParamSet(
makeNumericParam("eta", lower = 0.01, upper = 0.08),
makeNumericParam("subsample", lower = 0.7, upper = 1),
makeNumericParam("colsample_bytree", lower = 0.5, upper = 1),
makeIntegerParam("max_depth", lower = 5, upper = 12),
makeIntegerParam("min_child_weight", lower = 1, upper = 50)
)
ctrl1 <- makeTuneControlRandom(maxit = 48)
rdesc <- makeResampleDesc("CV", iters = 4)
parallelStartMulticore(16)
res <- tuneParams(xgblearner, trainTask, rdesc, measures = rmse, par.set = hyperpara_range, control = ctrl1)
train_eng$count_log <- log1p(train_eng$count)
trainTask <- makeRegrTask(data = train_eng, target = "count_log")
xgblearner <- makeLearner("regr.xgboost", nrounds = 400, nthread = 1, base_score = mean(train_eng$count_log))
hyperpara_range <- makeParamSet(
makeNumericParam("eta", lower = 0.01, upper = 0.08),
makeNumericParam("subsample", lower = 0.7, upper = 1),
makeNumericParam("colsample_bytree", lower = 0.5, upper = 1),
makeIntegerParam("max_depth", lower = 5, upper = 12),
makeIntegerParam("min_child_weight", lower = 1, upper = 50)
)
ctrl1 <- makeTuneControlRandom(maxit = 48)
rdesc <- makeResampleDesc("CV", iters = 4)
parallelStartMulticore(16)
res <- tuneParams(xgblearner, trainTask, rdesc, measures = rmse, par.set = hyperpara_range, control = ctrl1)
res <- tuneParams(xgblearner, trainTask, rdesc, par.set = hyperpara_range, control = ctrl1)
train_eng$count_log <- log1p(train_eng$count)
trainTask <- makeRegrTask(data = train_eng, target = "count_log")
xgblearner <- makeLearner("regr.xgboost", nrounds = 400, nthread = 1, base_score = mean(train_eng$count_log))
set.seed(123)
in_train <- createDataPartition(bike_eng$count, p = 3 / 4, list = FALSE)
train_eng <- bike_eng[in_train, ]
test_eng <- bike_eng[-in_train, ]
train_eng$count_log <- log1p(train_eng$count)
trainTask <- makeRegrTask(data = train_eng, target = "count_log")
xgblearner <- makeLearner("regr.xgboost", nrounds = 400, nthread = 1, base_score = mean(train_eng$count_log))
ctrl1 <- makeTuneControlRandom(maxit = 48)
rdesc <- makeResampleDesc("CV", iters = 4)
parallelStartMulticore(16)
res <- tuneParams(xgblearner, trainTask, rdesc, measures = rmse, par.set = hyperpara_range, control = ctrl1)
parallelStartMulticore(16)
(res <- tuneParams(xgblearner, trainTask, rdesc, measures = rmse, par.set = hyperpara_range, control = ctrl1))
fitxgb <- train(setHyperPars(lrn,  trainTask)
varImp(fitxgb)
varImp(fitxgb)
fitxgb <- train(setHyperPars(lrn,  trainTask)
fitxgb <- train(setHyperPars(lrn,  trainTask)
fitxgb <- train(setHyperPars(lrn),  trainTask)
fitxgb <- train(setHyperPars(xgblearner),  trainTask)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(parallelMap)
library(ggplot2)
library(lubridate)
library(randomForest)
library(caret)
library(doMC)
library(dplyr)
library(glmnet)
library(Metrics)
library(readr)
set.seed(1)
bike <- read.csv("/Users/nino/Documents/GitHub/bike_sharing_demand_CU/doc/train.csv")
featureEngineer <- function(df) {
names = c("season", "holiday", "workingday", "weather")
df[,names] = lapply(df[,names], factor)
df$datetime = strptime(as.character(df$datetime), format = "%Y-%m-%d %T", tz = "EST")
df$hour = as.factor(format(df$datetime, format = "%H"))
df$weekday = as.factor(format(df$datetime, format = "%u"))
df$year = as.factor(format(df$datetime, format = "%Y"))
df$datetime = df$casual = df$registered = NULL
return(df)
}
bike_eng <- featureEngineer(bike)
set.seed(123)
in_train <- createDataPartition(bike_eng$count, p = 3 / 4, list = FALSE)
train_eng <- bike_eng[in_train, ]
test_eng <- bike_eng[-in_train, ]
#extractfeatures
train <-  bike[in_train, ]
test <- bike[-in_train, ]
extractFeatures <- function(df) {
features <- c("season",
"holiday",
"workingday",
"weather",
"temp",
"atemp",
"humidity",
"windspeed",
"hour")
df$hour <- hour(ymd_hms(df$datetime))
return(df[, features])
}
trainFea <- extractFeatures(train)
#train our model
rf <- randomForest(extractFeatures(train), train$count, ntree=100, importance=TRUE)
#variable importance
imp <- importance(rf, type=1)
#plot variable importance
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
p
fit_lm <- lm(count ~ ., data = train_eng)
yhat_lm <- predict(fit_lm, newdata = test_eng)
defaultSummary(data.frame(obs = test_eng$count,
pred = yhat_lm))
summary(fit_lm)
enetGrid <- expand.grid(.lambda = seq(.05, 1, length = 10),
.fraction = seq(.05, 1, length = 10))
ctrl <- trainControl(method = "cv", number = 10)
lasso <- train(count ~ ., data = train_eng, method = "enet",
trControl = ctrl, tuneGrid = enetGrid)
yhat_las <- predict(lasso, newdata = test_eng)
defaultSummary(data.frame(obs = test_eng$count,
pred = yhat_las))
save.image("~/Documents/GitHub/bike_sharing_demand_CU/R/dec20.RData")
load("/Users/nino/Documents/GitHub/bike_sharing_demand_CU/R/dec20.RData")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(parallelMap)
library(ggplot2)
library(lubridate)
library(randomForest)
library(caret)
library(doMC)
library(dplyr)
library(glmnet)
library(Metrics)
library(readr)
set.seed(1)
?randomForest
predict(rf, newdata = test)
predict(rf, newdata = train)
class(tf)
class(rf)
rf$predicted
trainFea <- extractFeatures(train)
testFea <- extractFeatures(test)
yhat_rf <- predict(rf, newdata = testFea)
defaultSummary(data.frame(obs = test_eng$count,
pred = yhat_rf))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(parallelMap)
library(ggplot2)
library(lubridate)
library(randomForest)
library(caret)
library(doMC)
library(dplyr)
library(glmnet)
library(Metrics)
library(readr)
set.seed(1)
bike <- read.csv("/Users/nino/Documents/GitHub/bike_sharing_demand_CU/doc/train.csv")
featureEngineer <- function(df) {
names = c("season", "holiday", "workingday", "weather")
df[,names] = lapply(df[,names], factor)
df$datetime = strptime(as.character(df$datetime), format = "%Y-%m-%d %T", tz = "EST")
df$hour = as.factor(format(df$datetime, format = "%H"))
df$weekday = as.factor(format(df$datetime, format = "%u"))
df$year = as.factor(format(df$datetime, format = "%Y"))
df$datetime = df$casual = df$registered = NULL
return(df)
}
bike_eng <- featureEngineer(bike)
set.seed(123)
in_train <- createDataPartition(bike_eng$count, p = 3 / 4, list = FALSE)
train_eng <- bike_eng[in_train, ]
test_eng <- bike_eng[-in_train, ]
#extractfeatures
train <-  bike[in_train, ]
test <- bike[-in_train, ]
extractFeatures <- function(df) {
features <- c("season",
"holiday",
"workingday",
"weather",
"temp",
"atemp",
"humidity",
"windspeed",
"hour")
df$hour <- hour(ymd_hms(df$datetime))
return(df[, features])
}
trainFea <- extractFeatures(train)
testFea <- extractFeatures(test)
#train our model
rf <- randomForest(extractFeatures(train), train$count, ntree=100, importance=TRUE)
#variable importance
imp <- importance(rf, type=1)
#plot variable importance
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
geom_bar(stat="identity", fill="#53cfff") +
coord_flip() +
theme_light(base_size=20) +
xlab("Importance") +
ylab("") +
ggtitle("Random Forest Feature Importance\n") +
theme(plot.title=element_text(size=18))
p
yhat_rf <- predict(rf, newdata = testFea)
defaultSummary(data.frame(obs = testFea$count,
pred = yhat_rf))
yhat_rf <- predict(rf, newdata = testFea)
defaultSummary(data.frame(obs = testFea$count,
pred = yhat_rf))
defaultSummary(data.frame(obs = test$count,
pred = yhat_rf))
library(caret)
x = 1
y =x
y =2
x
y
library(readr)
setwd("~/Documents/GitHub/nino_code")
setwd("~/Documents/GitHub/Game_DataMining_With_R/nino/project1")
login <- read_csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
setwd("~/Documents/GitHub/Game_DataMining_With_R/nino/project1")
library(readr)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read_csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read_csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", encoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", encoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "UTF-8", header = F)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "UTF-8", header = F)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", header = T)
login <- read.table("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read.csv2("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read_csv(file = "/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv")
login <- read_csv(file = "/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", encoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", encoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", encoding = "GBK")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", encoding = "UTF-8")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "UTF-8")
View(login)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "GBK")
View(login)
str(login)
library(caret)
dummy <- dummyVars(~ ., data = login)
dummyTsrf <- data.frame(predict(dummy, newdata = logindata))
dummyTsrf <- data.frame(predict(dummy, newdata = login))
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
corList <- flattenSquareMatrix(cor.prob(dummyTsrf))
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
corList <- flattenSquareMatrix(cor.prob(dummyTsrf))
corMasterList <- flattenSquareMatrix(cor.prob(dummyTsrf))
print(head(corList))
corList <- corMasterList[order(-abs(corMasterList$cor)), ]
print(head(corList))
corMasterList <- flattenSquareMatrix(cor.prob(dummyTsrf))
corMasterList <- flattenSquareMatrix(cor.prob(dummyTsrf))
corList <- corMasterList[order(-abs(corMasterList$cor)), ]
print(head(corList))
print(head(corList),20)
print(head(corList))
print(head(corList, 20))
corList$i == "渠道名称.渠道A"
corList[corList$i == "渠道名称.渠道A"]
corList[corList$i == "渠道名称.渠道A",]
corList[corList$i == "渠道名称.渠道B",]
corList[corList$i == "渠道名称.渠道C",]
corList[corList$i == "渠道名称.渠道D",]
corList[corList$i == "渠道名称.渠道E",]
corList[corList$i == "渠道名称.渠道F",]
corList[corList$i == "渠道名称.渠道G",]
head(corList)
corList[corList$i == "渠道名称.渠道H",]
corList[corList$i == "渠道名称.渠道I",]
paycor <- subset(corList, (abs(cor) > 0.04 & i %in% c("是否付费.是")))
sub <- as.character(paycor$j)
sub
library(corrplot)
install.packages("corrplot")
??corrplot
install.packages('corrplot')
library(corrplot)
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是"), bestsub)]),
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", bestsub)]),
+ lower = "ellipse", upper = "number",
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", bestsub)]),
+ lower = "ellipse", upper = "number")
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", bestsub)]),
lower = "ellipse", upper = "number")
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", sub)]),
lower = "ellipse", upper = "number")
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", sub)]),
lower = "ellipse", upper = "number", tl.pos = "lt", diag = "u")
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "UTF-8")
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", sub)]),
lower = "ellipse", upper = "number", tl.pos = "lt", diag = "u")
sub
paycor
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", sub)]),
lower = "ellipse", upper = "number", tl.pos = "lt", diag = "u", family='STXihei')
setwd("~/Documents/GitHub/Game_DataMining_With_R/nino/project1")
library(readr)
library(caret)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "GBK")
str(login)
dummy <- dummyVars(~ ., data = login)
dummyTsrf <- data.frame(predict(dummy, newdata = login))
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
corMasterList <- flattenSquareMatrix(cor.prob(dummyTsrf))
corList <- corMasterList[order(-abs(corMasterList$cor)), ]
print(head(corList, 20))
paycor <- subset(corList, (abs(cor) > 0.04 & i %in% c("是否付费.是")))
sub <- as.character(paycor$j)
library(corrplot)
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", sub)]),
lower = "ellipse", upper = "number", tl.pos = "lt", diag = "u", family='STXihei')
summary(login)
summary(login$渠道名称)
str(login)
dummyTsrf
setwd("~/Documents/GitHub/Game_DataMining_With_R/nino/project1")
library(readr)
library(caret)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "GBK")
str(login)
summary(login)
head(login)
dim(login)
colnames(login)
dim(login$渠道名称)
unique(login$渠道名称)
summary(login)
head(login)
dim(login)
colnames(login)
unique(login$渠道名称)
print(head(corList, 20))
print(head(corList, 20))
head(login)
paycor <- subset(corList, (abs(cor) > 0.04 & i %in% c("是否付费.是")))
sub <- as.character(paycor$j)
library(corrplot)
plotcor <- corrplot.mixed(cor(dummyTsrf[, c("是否付费.是", sub)]),
lower = "ellipse", upper = "number", tl.pos = "lt", diag = "u", family='STXihei')
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
head(playershop)
rownames(playershop) <- playershop[ ,1]
head(playershop)
library(ca)
install.packages("ca")
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
y
library(ca)
playershop.ca <- ca(playershop[, -1])
playershop.ca
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析")
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析")
text(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],labels = playershop.ca$rownames,
cex = 0.8,pos = 4,col = rgb(0.6,0.3,0.2))
points(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],pch = 17,col = "#007e7e")
text(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],labels = w.ca$colnames,
cex = 0.8,pos = 4,col = "#007e7e",family = "STXihei")
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析")
text(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],labels = playershop.ca$rownames,
cex = 0.8,pos = 4,col = rgb(0.6,0.3,0.2))
points(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],pch = 17,col = "#007e7e")
text(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],labels = playershop.ca$colnames,
cex = 0.8,pos = 4,col = "#007e7e",family = "STXihei")
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析" ,family = "STXihei")
text(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],labels = playershop.ca$rownames,
cex = 0.8,pos = 4,col = rgb(0.6,0.3,0.2))
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析" ,family = "STXihei")
text(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],labels = playershop.ca$rownames,
cex = 0.8,pos = 4,col = rgb(0.6,0.3,0.2))
points(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],pch = 17,col = "#007e7e")
text(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],labels = playershop.ca$colnames,
cex = 0.8,pos = 4,col = "#007e7e",family = "STXihei")
points(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],pch = 17,col = "#007e7e", family = "STXihei")
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析" ,family = "STXihei")
text(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],labels = playershop.ca$rownames,
cex = 0.8,pos = 4,col = rgb(0.6,0.3,0.2))
points(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],pch = 17,col = "#007e7e", family = "STXihei")
text(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],labels = playershop.ca$colnames,
cex = 0.8,pos = 4,col = "#007e7e",family = "STXihei")
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
plot(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],pch = 16,col = rgb(0.6,0.3,0.2),
xlim = c(min(playershop.ca$rowcoord[,1]),max(playershop.ca$rowcoord[,1])+0.3),
main = "玩家购买物品偏好分析" ,family = "STXihei")
text(playershop.ca$rowcoord[,1],playershop.ca$rowcoord[,2],labels = playershop.ca$rownames,
cex = 0.8,pos = 4,col = rgb(0.6,0.3,0.2), family = "STXihei")
points(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],pch = 17,col = "#007e7e", family = "STXihei")
text(playershop.ca$colcoord[,1],playershop.ca$colcoord[,2],labels = playershop.ca$colnames,
cex = 0.8,pos = 4,col = "#007e7e",family = "STXihei")
setwd("~/Documents/GitHub/Game_DataMining_With_R/nino/project1")
library(readr)
library(caret)
login <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/logindata.csv", fileEncoding = "GBK")
str(login)
summary(login)
head(login)
dim(login)
colnames(login)
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
summary(playershop.ca)
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
library(ca)
playershop <- read.csv("/Users/nino/Documents/GitHub/Game_DataMining_With_R/nino/project1/玩家喜好分析数据.csv", T)
rownames(playershop) <- playershop[ ,1]
playershop.ca <- ca(playershop[, -1])
summary(playershop)
head(playershop)
unique(playershop$道具名称)
